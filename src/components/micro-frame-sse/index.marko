$ async function* parser(readable) {
    for await (const buf of readable) {
        const events = buf.toString().split('\n\n').filter(Boolean);
        for (const eventStr of events) {
            let data = '';
            let id;
            let type;
            const lines = eventStr.split('\n').filter(Boolean);
            const idRegEx = /^id: (.*?)$/;
            const dataRegEx = /^data: (.*?)$/;
            const typeRegEx = /^type: (.*?)$/;
            for (const l of lines) {
                const idRes = idRegEx.exec(l);
                if (idRes) {
                    id = idRes[1];
                }

                const typeRes = typeRegEx.exec(l);
                if (typeRes) {
                    type = typeRes[1];
                }

                const dataRes = dataRegEx.exec(l);
                data += dataRes ? dataRes[1] : '';
            }
            yield input.read({lastEventId: id, data, type});
        }
    }
};

<stream-source parser=parser ...input />