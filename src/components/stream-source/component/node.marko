import fetch from "make-fetch-happen";
import path from "path";
import StreamSource from "./StreamSource";

static const cachePath = path.resolve("node_modules/.cache/fetch");

$ {
  if (!(out.global.micro_frame_sources instanceof Map)) {
    out.global.micro_frame_sources = new Map();
  }
  out.global.micro_frame_sources.set(input.name, new StreamSource());
}

$ const request = async () => {
  const incomingMessage = out.stream && (out.stream.req || out.stream.request);

  if (!incomingMessage) {
    throw new Error("Could not get request from stream.");
  }

  const url = new URL(input.src, `${incomingMessage.protocol}://${incomingMessage.headers.host}`);
  const res = await fetch(url, {
    method: input.method,
    body: input.body,
    cachePath,
    cache: input.cache,
    strictSSL: process.env.NODE_TLS_REJECT_UNAUTHORIZED !== "0",
    headers: input.headers,
  })

  if (!res.ok) throw new Error(res.statusText);

  return res;
}
$ const streamSource = out.global.micro_frame_sources.get(input.name);

<div id=component.id data-src=input.src>
  $ out.bf("@_", component, true);
  <await(request())>
    <@then|{ body }|>
      $ streamSource.run(input.parser(body));
    </@then>
    <@catch|err|>
      $ streamSource.close(err);
      <${input.catch}(err)/>
    </@catch>
  </await>
  $ out.ef();
</div>

