import fetch from "make-fetch-happen";
import StreamSource from "./StreamSource";
$ {
  if (!(out.global.micro_frame_sources instanceof Map)) {
    out.global.micro_frame_sources = new Map();
  }
  out.global.micro_frame_sources.set(input.name, new StreamSource());
}

$ const request = async () => {
  const res = await fetch(input.src, {
    method: input.method,
    body: JSON.stringify(input.body),
    cache: input.cache,
    strictSSL: process.env.NODE_TLS_REJECT_UNAUTHORIZED !== "0",
    headers: input.headers,
  })

  if (!res.ok) throw new Error(res.statusText);

  return res;
}
$ const streamSource = out.global.micro_frame_sources.get(input.name);

<div id=component.id data-src=input.src>
  $ out.bf("@_", component, true);
  <await(request()) catch=input.catch>
    <@then|{ body }|>
      $ streamSource.run(input.parser(body));
    </@then>
  </await>
  $ out.ef();
</div>

