import fetch from "make-fetch-happen";
import StreamSource from "./StreamSource";
$ {
  const name = input.name;
  if (out.global.micro_frame_sources instanceof Map) {
    if (out.global.micro_frame_sources.has(name)) {
      throw new Error(`micro-frame-sse ${name} already exists.`);
    }
  } else {
    out.global.micro_frame_sources = new Map();
  }
  out.global.micro_frame_sources.set(name, new StreamSource());
}

$ const request = async () => {
  const res = await fetch(input.src, {
    method: input.method || "get",
    body: JSON.stringify(input.body),
    strictSSL: process.env.NODE_TLS_REJECT_UNAUTHORIZED !== "0",
    headers: input.headers,
  })

  if (!res.ok) throw new Error(res.statusText);

  return res;
}
$ const streamSource = out.global.micro_frame_sources.get(input.name);

$ out.bf("@_", component, true);
<await(request()) catch=input.catch>
  <@then|{ body }|>
    $ streamSource.run(input.parser(body), { closeAfterRead: true });
  </@then>
</await>
$ out.ef();
