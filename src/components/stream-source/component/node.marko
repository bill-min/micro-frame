import StreamSource from "./StreamSource";
import request from "./request";
$ {
  const streamSource = new StreamSource();
  if (out.global.STREAM_SOURCE_MAP_SERVER === undefined) {
    out.global.STREAM_SOURCE_MAP_SERVER = new Map();
  }
  out.global.STREAM_SOURCE_MAP_SERVER.set(input.name, streamSource);
  const incomingMessage =
    (out.stream && (out.stream.req || out.stream.request)) ||
    out.global.req ||
    out.global.request;
  if (!incomingMessage) {
    throw new Error(
      "Could not get request from stream/global. Please assign out.global.req with proper request object."
    );
  }
}

<div id=component.id data-src=input.src>
  $ out.bf("@_", component, true);
  <await(
    request(incomingMessage, input.src, {
      fetch: input.fetch,
      cache: input.cache,
      headers: input.headers,
    })
  ) client-reorder timeout=input.timeout>
    <@then|{ body }|>
      <await(
        streamSource.run(input.parser(body[Symbol.asyncIterator]())),
      ) client-reorder>
        <@catch|err|>
          $ streamSource.close(err);
        </@catch>
      </await>
    </@then>
    <@catch|err|>
      $ streamSource.close(err);
    </@catch>
  </await>
  $ out.ef();
</div>
