import fetch from "make-fetch-happen";
import path from "path";
import StreamSource from "./StreamSource";

static const cachePath = path.resolve("node_modules/.cache/fetch");

$ {
  if (!(out.global.micro_frame_sources instanceof Map)) {
    out.global.micro_frame_sources = new Map();
  }
  out.global.micro_frame_sources.set(input.name, new StreamSource());
}

$ const request = async () => {
  const incomingMessage = out.stream && (out.stream.req || out.stream.request);

  if (!incomingMessage) {
    throw new Error("Could not get request from stream.");
  }

  const url = new URL(input.src, `${incomingMessage.protocol}://${incomingMessage.headers.host}`);
  const res = await (input.fetch || fetch)(url, {
    method: input.method,
    body: input.body,
    cachePath,
    cache: input.cache,
    strictSSL: process.env.NODE_TLS_REJECT_UNAUTHORIZED !== "0",
    headers: input.headers,
  })

  if (!res.ok) throw new Error(res.statusText);

  return res;
}
$ const streamSource = out.global.micro_frame_sources.get(input.name);

<div id=component.id data-src=input.src>
  <if(input.loading)>
    <${input.loading}/>
    <!-- output a comment used as a marker to detect where the loading content starts so it can be removed -->
    $!{`<!--${component.id}-->`}
  </if>

  $ out.bf("@_", component, true);
  <await(request()) client-reorder>
    <@then|{ body }|>
      <await(streamSource.run(input.parser(body))) client-reorder>
        <@then>
          <if(input.loading)>
            <!-- Remove all of the <@loading> content after we've received all the data -->
            $ out.script(`((e,t,d)=>{t=document.getElementById(e);do{t.removeChild(d=t.firstChild)}while(d.data!==e)})(${JSON.stringify(component.id)});`);
          </if>
        </@then>
        <@catch|err|>
          $ streamSource.close(err);
          <if(input.catch)>
            <${input.catch}(err)/>
          </if>
        </@catch>
      </await>
    </@then>
    <@catch|err|>
      $ streamSource.close(err);
      <if(input.catch)>
        <${input.catch}(err)/>
      </if>
    </@catch>
  </await>
  $ out.ef();
</div>

